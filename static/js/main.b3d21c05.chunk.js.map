{"version":3,"sources":["components/Nav.js","components/Header.js","components/FeaturedCard.js","images/home-banner.png","images/card-back.png","pages/Home.js","components/Card.js","components/API.js","components/SearchInput.js","pages/Search.js","components/CardHistory.js","pages/SearchHistory.js","components/Routes.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","style","styles","container","nav","to","linkDecorationStart","activeStyle","color","textDecoration","linkDecorationMiddle","linkDecorationEnd","backgroundColor","display","justifyContent","width","paddingBottom","height","alignItems","flexDirection","fontSize","fontWeight","textAlign","Header","props","header","fontFamily","margin","FeaturedCard","className","containerMainHeader","cardHeader","cardName","card","src","img","alt","imgAlt","marginLeft","marginRight","marginTop","borderRadius","boxShadow","p","textOverflow","maxWidth","overflow","whiteSpace","Home","useState","name","card_images","image_url","featuredCardDetails","setFeaturedCardDetails","useEffect","a","fetch","responseForCardDetails","apiCallResponse","cardBack","json","cardJsonData","fetchAPI","articleTitle","homeBanner","articleSubTitle","body","marginBottom","lineHeight","Card","wrapper","headerTxt","cardImg","image","cardInfoTitle","cardInfoDetails","attribute","starLevel","type","race","atk","def","description","minHeight","alignSelf","API","JSON","parse","localStorage","getItem","searchHistory","setSearchHistory","toggle","setToggle","data","desc","level","cardDetails","setCardDetails","randomCardDetails","setRandomCardDetails","urlForCardDetails","url","errorMsg","document","querySelector","innerText","cardInfo","searchHistoryList","cardExist","i","length","splice","unshift","window","setItem","stringify","pop","btnContainer","btn","onClick","padding","SearchInput","setCardName","cardList","setCardList","statusCall","setStatusCall","handleSubmit","e","cardExists","inputElm","inputValue","value","toLowerCase","key","createCardList","inputLabel","input","onKeyPress","btnIcon","error","subText","apiCardInfo","cardLists","push","paddingTop","paddingLeft","paddingRight","position","top","left","border","Search","search","justifyItems","CardHistory","imgContainer","nameContainer","SearchHistory","history","map","element","headerContainer","clear","disabledBtn","disabled","contentContainer","flexWrap","Routes","exact","path","component","Footer","footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b3d21c05.chunk.js","sourcesContent":["import React from 'react';\nimport  { NavLink } from 'react-router-dom';\n\nfunction Nav() {\n    return (\n        <div style={styles.container}>\n            <nav style={styles.nav}>\n                <NavLink to='/Home' style={styles.linkDecorationStart} activeStyle={{color: \"#FFC300\", textDecoration: 'underline'}}>\n                    Home\n                </NavLink>\n                <NavLink to='/Search' style={styles.linkDecorationMiddle} activeStyle={{color: \"#FFC300\", textDecoration: 'underline'}}>\n                    Search\n                </NavLink>\n                <NavLink to='/SearchHistory' style={styles.linkDecorationEnd} activeStyle={{color: \"#FFC300\", textDecoration: 'underline'}}>\n                    Search History\n                </NavLink>\n            </nav>\n        </div>\n    );\n}\n\nexport default Nav;\n\n// CSS Modules\nconst styles = {\n    container: {\n        backgroundColor: '#001D3D',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    nav: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '75%',\n        paddingBottom: '50px',\n    },\n    linkDecorationStart: {\n        color: '#FDF5D9',\n        height: '33px',\n        alignItems: 'center',\n        flexDirection: 'row',\n        fontSize: '32px',\n        textDecoration: 'none',\n        fontWeight: '500',\n        width: '33%',\n        textAlign: 'start',\n    },\n    linkDecorationMiddle: {\n        color: '#FDF5D9',\n        height: '33px',\n        alignItems: 'center',\n        flexDirection: 'row',\n        fontSize: '32px',\n        textDecoration: 'none',\n        fontWeight: '500',\n        width: '33%',\n        textAlign: 'center',\n    },\n    linkDecorationEnd: {\n        color: '#FDF5D9',\n        height: '33px',\n        alignItems: 'center',\n        flexDirection: 'row',\n        fontSize: '32px',\n        textDecoration: 'none',\n        fontWeight: '500',\n        width: '33%',\n        textAlign: 'end'\n    },\n}","import React from 'react';\n\n// Importing Component\nimport Nav from './Nav';\n\nfunction Header(props) {\n    return (\n        <header style={styles.container}>\n            <h1 style={styles.header}>{props.header}</h1>\n            <Nav />\n        </header>\n    );\n}\n\nexport default Header;\n\n// CSS Modules\nconst styles = {\n    container: {\n        fontFamily: 'casablanca-urw, sans-serif',\n    },\n    header: {\n        backgroundColor: '#001D3D',\n        color: '#FFC300',\n        height: '200px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        margin: '0',\n        fontWeight: '700',\n        fontSize: '42px',\n    }\n}","import React from 'react';\n\n\nfunction FeaturedCard(props) {\n\n    return (\n        <div className='featured-card--main-container'>\n            <h2 style={styles.containerMainHeader}>Featured Card</h2>\n            <section style={styles.container}>\n                <div style={styles.header}>\n                    <h3 style={styles.cardHeader}>{props.cardName}</h3>\n                </div>\n\n                <img style={styles.card} src={props.img} alt={props.imgAlt}/>\n            </section>\n        </div>\n    );\n}\n\nexport default FeaturedCard;\n\n// CSS Modules\nconst styles = {\n    card: {\n        height: '321px',\n        width: '220px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginTop: '40px',\n    },\n    container: {\n        backgroundColor: '#BFC7C0',\n        width: '398px',\n        height: '464px',\n        borderRadius: '4px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        boxShadow: '0px 3px 15px rgba(0,0,0,0.2)',\n    },\n    header: {\n        backgroundColor: '#071D3B',\n        height: '58px',\n        width: '100%',\n        color: '#F6C443',\n        borderRadius:'4px 4px 0 0',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    p: {\n        marginTop: '40px',\n        fontSize: '18px',\n        fontWeight: '500',\n    },\n    containerMainHeader: {\n        fontWeight: '500',\n        fontSize: '32px',\n        color: '#071D3B',\n    },\n    cardHeader: {\n        fontWeight: '500',\n        fontSize: '32px',\n        textOverflow: 'ellipsis',\n        maxWidth: '304px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n    },\n}","export default __webpack_public_path__ + \"static/media/home-banner.1d825174.png\";","export default __webpack_public_path__ + \"static/media/card-back.e20d1da4.png\";","import React, {useEffect, useState} from \"react\";\n\n// Importing Component\nimport FeaturedCard from \"../components/FeaturedCard\";\n\n//Importing Images\nimport homeBanner from '../images/home-banner.png';\nimport cardBack from '../images/card-back.png';\n\n// Importing Stylesheet\nimport '../CSS/style.css';\n\nfunction Home() {\n\n    const [featuredCardDetails, setFeaturedCardDetails] = useState({name: '',  card_images: [{image_url: ''}]});\n\n    // Using fetch, async, and await to get our API information. We are calling the function below.\n    useEffect(() => {\n        async function fetchAPI() {\n            const url = `https://db.ygoprodeck.com/api/v7/randomcard.php`\n            let responseForCardDetails;\n            let apiCallResponse;\n\n            try {\n                responseForCardDetails = await fetch(url);\n                apiCallResponse = true;\n            } catch (e) {\n                setFeaturedCardDetails({name: 'API Unavailable',  card_images: [{image_url: cardBack}]});\n                apiCallResponse = false;\n            } finally {\n\n                if (apiCallResponse === true) {\n                    const cardJsonData = await responseForCardDetails.json();\n                    let cardInfo = [];\n\n                    cardInfo = cardJsonData;\n\n                    setFeaturedCardDetails(cardInfo);\n                }\n            }\n        }\n        fetchAPI();\n    }, []);\n\n    return (\n        <main className='home--main-container'>\n            <section className='home--main-section'>\n                <article className='home--main-article'>\n                    <h2 style={styles.articleTitle}>Welcome to Yu-Gi-Oh Card Vault</h2>\n                    <img style={styles.img} src={homeBanner} alt='desktop banner'/>\n                    <h3 style={styles.articleSubTitle}>About us</h3>\n                    <p style={styles.p}>\n                        Yu-Gi-Oh Card Vault is a website focused on the Yu-Gi-Oh Trading Card game where users can search\n                        for specific cards by entering a card name. Users can even find new cards by viewing a random card\n                        from the existing 10,000+ cards in the game with a click of a button.\n                    </p>\n                </article>\n            </section>\n\n            <FeaturedCard cardName={featuredCardDetails.name} img={featuredCardDetails.card_images[0].image_url} imgAlt={featuredCardDetails.name} />\n        </main>\n    );\n}\n\nexport default Home;\n\n// CSS Modules\nconst styles = {\n    body: {\n        textAlign: 'center',\n        marginTop: '0',\n    },\n    articleTitle: {\n        fontWeight: '500',\n        fontSize: '32px',\n        color: '#071D3B',\n    },\n    articleSubTitle: {\n        fontWeight: '500',\n        fontSize: '26px',\n        marginBottom: '-18px',\n        color: '#071D3B',\n    },\n    p: {\n        lineHeight: '2',\n        fontWeight: '300',\n        fontSize: '18px',\n        color: '#4E574F',\n    },\n    img: {\n        borderRadius: '4px',\n    },\n}","import React from 'react';\n\nfunction Card(props) {\n    return (\n        <div style={styles.wrapper}>\n            <section className='card--main-section-card-container'>\n                <header className='card--main-section-card-header'>\n                    <h2 style={styles.headerTxt}>{props.name}</h2>\n                </header>\n\n                <section className='card--main-section-card-info'>\n                    <div className='card--main-section-card-column-img'>\n                        <img style={styles.cardImg} src={props.image} alt={props.imgAlt}/>\n                    </div>\n\n                    <section className='card--main-section-card-column-details'>\n                        <section className='half-row'>\n                            <section className='half-row--section'>\n                                <h3 style={styles.cardInfoTitle}>Attribute</h3>\n                                <p style={styles.cardInfoDetails}>{props.attribute}</p>\n                            </section>\n\n                            <section className='half-row--section'>\n                                <h3 style={styles.cardInfoTitle}>Level</h3>\n                                <p style={styles.cardInfoDetails}>{props.starLevel}</p>\n                            </section>\n                        </section>\n\n                        <section className='full-row--section'>\n                            <h3 style={styles.cardInfoTitle}>Card Type</h3>\n                            <p style={styles.cardInfoDetails}>{props.type}</p>\n                        </section>\n\n                        <section className='full-row--section'>\n                            <h3 style={styles.cardInfoTitle}>Sub Type</h3>\n                            <p style={styles.cardInfoDetails}>{props.race}</p>\n                        </section>\n\n                        <section className='half-row'>\n                            <section className='half-row--section'>\n                                <h3 style={styles.cardInfoTitle}>ATK</h3>\n                                <p style={styles.cardInfoDetails}>{props.atk}</p>\n                            </section>\n\n                            <section className='half-row--section'>\n                                <h3 style={styles.cardInfoTitle}>DEF</h3>\n                                <p style={styles.cardInfoDetails}>{props.def}</p>\n                            </section>\n                        </section>\n\n                        <section className='full-row--section-effect'>\n                            <h3 style={styles.cardInfoTitle}>Card Text</h3>\n                            <p style={styles.cardInfoDetails}>{props.description}</p>\n                        </section>\n                    </section>\n                </section>\n            </section>\n        </div>\n    );\n}\n\nexport default Card;\n\n// CSS Modules\nconst styles = {\n    container: {\n        minHeight: '424px',\n        width: '705px',\n        borderRadius: '4px',\n        backgroundColor: '#BFC7C0',\n        fontFamily: 'casablanca-urw, sans-serif',\n        height: 'auto',\n    },\n    headerTxt: {\n        textAlign: 'center',\n        fontSize: '32px',\n        fontWeight: '500',\n        lineHeight: '69px',\n        marginTop: '0',\n    },\n    cardImg: {\n        width: '200px',\n        height: '300px',\n        marginTop: '0',\n        alignSelf: 'center',\n    },\n    cardInfoTitle: {\n        fontWeight: '500',\n        color: '#071D3B',\n        fontSize: '23px',\n    },\n    cardInfoDetails: {\n        fontWeight: '300',\n        color: '#4E574F',\n        fontSize: '23px',\n    },\n    wrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n}","import React, {useEffect, useState} from 'react';\n\n// Importing Component\nimport Card from './Card';\n\n// Import Image\nimport cardBack from '../images/card-back.png';\n\nfunction API(props) {\n\n    // Setting state based on existing data from localStorage or if not it will be an empty array.\n    const [searchHistory, setSearchHistory] = useState(JSON.parse(localStorage.getItem('cardSearchHistory')) || []);\n\n    // Setting state to true, this will determine which component set is loaded. Either from a specific search or a random card.\n    const [toggle, setToggle] = useState(true);\n\n    // Setting up our state and leaving it empty when we load the page.\n    const [cardDetails, setCardDetails] = useState({\n        data: [{\n            name: 'Card Info',\n            type: 'N/A',\n            card_images: [{image_url: cardBack}],\n            desc: 'N/A',\n            atk: 'N/A',\n            def: 'N/A',\n            attribute: 'N/A',\n            level: 'N/A',\n            race: 'N/A',\n        }]});\n\n    // Setting up our state and leaving it empty when we load the page.\n    const [randomCardDetails, setRandomCardDetails] = useState({\n        name: 'Card Info',\n        card_images: [{image_url: cardBack}],\n        desc: 'N/A',\n        type: 'N/A',\n        atk: 'N/A',\n        def: 'N/A',\n        attribute: 'N/A',\n        level: 'N/A',\n        race: 'N/A',\n    });\n\n    // Setting the url for our API call based on the props being passed in from Search.js.\n    let urlForCardDetails = `https://db.ygoprodeck.com/api/v7/cardinfo.php?name=${props.url}`;\n\n    // Using fetch, async, and await to get our API information. We are calling the function below.\n    useEffect(() => {\n\n        // This function will run when the user puts in data for the input and hits enter or presses the search button.\n        async function fetchAPI() {\n            let errorMsg = document.querySelector('.errorMsg');\n            let responseForCardDetails;\n            let cardInfo;\n            let apiCallResponse;\n\n            // We will not call the API if the value is null like it is on the initial page load.\n            if (props.url !== null) {\n                // We will use a try catch finally when making a call to the API.\n                try {\n                    responseForCardDetails = await fetch(urlForCardDetails);\n                    apiCallResponse = true;\n                } catch (e) {\n                    errorMsg.innerText = 'There is currently an issue with the API, try again later.';\n                    apiCallResponse = false; // If there is an error we will set the state of statusCall to false.\n                } finally {\n                    // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n                    if(apiCallResponse === true) {\n\n                        responseForCardDetails = await fetch(urlForCardDetails);\n\n                        const cardJsonData = await responseForCardDetails.json();\n                        cardInfo = [];\n\n                        cardInfo = cardJsonData;\n\n                        setCardDetails(cardInfo);\n\n                        // Saving info to our history\n                        let searchHistoryList = searchHistory;\n\n                        let cardExist = false;\n\n                        /*\n                        If the card exists in our search history we will remove it from the array and put it at the beginning.\n                        We will then update out local storage.\n                         */\n                        for (let i = 0; i < searchHistoryList.length; i++) {\n                            if (cardInfo.data[0].name === searchHistoryList[i].cardName) {\n                                cardExist = true;\n                                searchHistoryList.splice(i, 1);\n                                searchHistoryList.unshift({cardName: cardInfo.data[0].name, cardImg: cardInfo.data[0].card_images[0].image_url});\n                                window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                            }\n                        }\n\n                        // If the card does not exist in our search history we will then add it to our search history.\n                        if (cardExist === false) {\n                            searchHistoryList.unshift({cardName: cardInfo.data[0].name, cardImg: cardInfo.data[0].card_images[0].image_url});\n                            setSearchHistory(searchHistoryList);\n\n                            /*\n                            As we don't want our search history to be too long we will only ensure we have a max of 6 items,\n                            so we will remove the last item in the array when a new one is added.\n                            */\n                            if (searchHistoryList.length > 6) {\n                                while (searchHistoryList.length > 6) {\n                                    searchHistoryList.pop();\n                                }\n                            }\n\n                            // We will then update out local storage.\n                            window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                        }\n\n                        // Setting toggle to display searched card.\n                        setToggle(true);\n                    }\n                }\n            }\n        }\n        fetchAPI();\n    }, [urlForCardDetails, props.url, searchHistory]); // Stating our dependencies.\n\n    return (\n        <div>\n            <div style={styles.btnContainer}>\n                <button style={styles.btn} onClick={getRandomCard}>Random Card</button>\n            </div>\n\n            <div style={styles.container}>\n            {/*  If the toggle is set to true it will display API structure based on a search call.  */}\n            {toggle && <Card\n                name={cardDetails.data[0].name}\n                image={cardDetails.data[0].card_images[0].image_url}\n                type={cardDetails.data[0].type}\n                description={cardDetails.data[0].desc}\n                atk={cardDetails.data[0].atk}\n                def={cardDetails.data[0].def}\n                starLevel={cardDetails.data[0].level}\n                attribute={cardDetails.data[0].attribute}\n                race={cardDetails.data[0].race}\n                imgAlt={cardDetails.data[0].name}\n            /> }\n\n            {/*  If the toggle is set to false it will display API structure based on the random call.  */}\n            {!toggle && <Card\n                name={randomCardDetails.name}\n                image={randomCardDetails.card_images[0].image_url}\n                type={randomCardDetails.type}\n                description={randomCardDetails.desc}\n                atk={randomCardDetails.atk}\n                def={randomCardDetails.def}\n                starLevel={randomCardDetails.level}\n                attribute={randomCardDetails.attribute}\n                race={randomCardDetails.race}\n                imgAlt={randomCardDetails.name}\n            /> }\n            </div>\n        </div>\n    );\n\n    // This function will run when clicking on the random card button.\n    async function getRandomCard () {\n            let responseForCardDetails;\n            const url = `https://db.ygoprodeck.com/api/v7/randomcard.php`;\n            let searchHistoryList = searchHistory;\n            let errorMsg = document.querySelector('.errorMsg');\n            let apiCallResponse;\n\n            errorMsg.innerText = ''; // Clearing the error message.\n\n            try {\n                responseForCardDetails = await fetch(url);\n                apiCallResponse = true;\n            } catch (e) {\n                apiCallResponse = false\n                errorMsg.innerText = 'There is currently an issue with the API, please try again later.';\n            } finally {\n\n                // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n                if(apiCallResponse === true) {\n                    responseForCardDetails = await fetch(url);\n\n                    const cardJsonData = await responseForCardDetails.json();\n                    let cardInfo = [];\n\n                    cardInfo = cardJsonData;\n\n                    setRandomCardDetails(cardInfo);\n\n                    let cardExist = false;\n\n                    /*\n                    If the card exists in our search history we will remove it from the array and put it at the beginning.\n                    We will then update out local storage.\n                    */\n                    for (let i = 0; i < searchHistoryList.length; i++) {\n                        if (cardInfo.name === searchHistoryList[i].cardName) {\n                            cardExist = true;\n                            searchHistoryList.splice(i, 1);\n                            searchHistoryList.unshift({cardName: cardInfo.name, cardImg: cardInfo.card_images[0].image_url});\n                            window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                        }\n                    }\n\n                    /*\n                    As we don't want our search history to be too long we will only ensure we have a max of 6 items,\n                    so we will remove the last item in the array when a new one is added.\n                    */\n                    if (searchHistoryList.length > 5) {\n                        while (searchHistoryList.length > 5) {\n                            searchHistoryList.pop();\n                        }\n                    }\n\n                    // If the card does not exist in our search history we will then add it to our search history.\n                    if (cardExist === false) {\n                        searchHistoryList.unshift({cardName: cardInfo.name, cardImg: cardInfo.card_images[0].image_url});\n                        setSearchHistory(searchHistoryList);\n\n                        // We will then update out local storage.\n                        window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                    }\n\n                    // Setting toggle to display random card.\n                    setToggle(false);\n                }\n            }\n        }\n    }\n\nexport default API;\n\n// CSS Modules\nconst styles = {\n    container: {\n        fontFamily: 'casablanca-urw, sans-serif',\n        display: 'flex',\n        marginTop: '30px',\n    },\n    btnContainer: {\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'center',\n    },\n    btn: {\n        padding: '20px 75px',\n        backgroundColor: '#071D3B',\n        color: '#FFC300',\n        fontSize: '23px',\n        fontWeight: '500',\n        borderRadius: '4px',\n        fontFamily: 'casablanca-urw, sans-serif',\n    }\n}\n","import React, {useEffect, useState} from 'react';\n\n// Importing Component\nimport Api from \"./API\";\n\n// Importing Icon\nimport { BsSearch } from \"react-icons/bs\";\n\nfunction SearchInput() {\n\n    // Setting our states for cardName, cardList, and statusCall.\n    const [cardName, setCardName] = useState(null);\n    const [cardList, setCardList] = useState([]);\n    const [statusCall, setStatusCall] = useState(null);\n\n    // Using fetch, async, and await to get our API information. We are calling the function below.\n    useEffect(() => {\n        async function fetchAPI() {\n            const url = `https://db.ygoprodeck.com/api/v7/cardinfo.php`;\n            let responseForCardDetails;\n\n            // We will use a try catch finally when making a call to the API.\n            try {\n                responseForCardDetails = await fetch(url);\n                setStatusCall(true);\n            } catch (e) {\n                setStatusCall(false); // If there is an error we will set the state of statusCall to false.\n\n                // If we get an error we will display the error on the page.\n                document.querySelector('.errorMsg').innerText = \"Card searching is currently unavailable, try again later!\";\n            } finally {\n\n                // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card list state.\n                if (statusCall === true) {\n                    const cardJsonData = await responseForCardDetails.json();\n                    let cardInfo = [];\n\n                    cardInfo = cardJsonData;\n\n                    createCardList(cardInfo); // This method will be used to set our list of cards.\n                }\n            }\n        }\n        fetchAPI();\n    }, [statusCall]);\n\n    // This function will take the value of the input and set it to the state if not left blank.\n    function handleSubmit (e) {\n        let cardExists = false;\n        let inputElm = document.querySelector('.cardInput');\n        let errorMsg = document.querySelector('.errorMsg');\n        let inputValue = inputElm.value.toLowerCase();\n\n        if (statusCall === false) {\n\n            // If we get an error we will display the error on the page.\n            errorMsg.innerText = \"Card searching is currently unavailable, try again later!\";\n        } else {\n            if (e.key === 'Enter' || e.type === 'click') {\n                if (inputValue === '') {\n                    // If the user tries to enter blank data we will display the error on the page.\n                    errorMsg.innerText = \"Please don't leave the input blank, try again!\";\n                } else {\n\n                    /*\n                    We will loop through our list of cards to see if the value matches a card in the list.\n                    If a card exists we will set cardExists to true.\n                     */\n                    for(let i = 0; i < cardList.length; i++) {\n                        if(inputValue === cardList[i]) {\n                            cardExists = true;\n                        }\n                    }\n\n                    // If we found that the card does exist we will run this.\n                    if (cardExists === true) {\n                        if (inputValue !== '') {\n                            setCardName(inputValue);\n                            inputElm.value = ''; // Clearing the text input.\n                            errorMsg.innerText = ''; // Clearing the error message.\n                        }\n                    } else {\n                        // If we found the card does not exist this will run and will display and error to the user.\n                        errorMsg.innerText = \"That card couldn't found, please try again!\";\n                        inputElm.value = ''; // Clearing the text input.\n                    }\n                }\n            }\n        }\n    }\n\n    return (\n        <div className='search-input--main-container'>\n            <section className='search-input--main-section'>\n                <div className='search-input--main-input-container'>\n                    <div>\n                        <p style={styles.inputLabel}>Enter A Card Name:</p>\n                        <input style={styles.input} onKeyPress={handleSubmit} className='cardInput' type='text' />\n                        <button style={styles.btn} onClick={handleSubmit}><BsSearch style={styles.btnIcon} /></button>\n                    </div>\n                    <p className='errorMsg' style={styles.error} />\n                </div>\n\n                <p style={styles.subText}>OR</p>\n                <Api url={cardName} />\n            </section>\n        </div>\n    );\n\n    // This function will set our card list state with a current list of all available cards in the game.\n    function createCardList (apiCardInfo) {\n        let cardLists = [];\n\n        for(let i = 0; i < apiCardInfo.data.length; i++) {\n            cardLists.push(apiCardInfo.data[i].name.toLowerCase());\n        }\n        setCardList(cardLists);\n    }\n}\n\nexport default SearchInput;\n\n// CSS Modules\nconst styles = {\n    inputLabel: {\n        marginTop: '0',\n        marginBottom: '3px',\n        fontFamily: 'casablanca-urw, sans-serif',\n        fontSize: '23px',\n        fontWeight: '500',\n        color: '#071D3B',\n        paddingTop: '100px',\n    },\n    input: {\n        height: '42px',\n        width: '75%',\n        paddingLeft: '5px',\n        paddingRight: '5px',\n        color: '#4E574F',\n        fontFamily: 'casablanca-urw, sans-serif',\n        fontSize: '23px',\n        fontWeight: '500',\n    },\n    btn: {\n        height: '48px',\n        position: 'relative',\n        width: '55px',\n        backgroundColor: '#071D3B',\n        top: '7px',\n        left: '-2px',\n        border: 'none',\n        borderRadius: '0 4px 4px 0',\n    },\n    btnIcon: {\n        color: '#FFC300',\n        height: '31px',\n        width: '31px',\n    },\n    subText: {\n        fontFamily: 'casablanca-urw, sans-serif',\n        fontSize: '23px',\n        fontWeight: '500',\n        color: '#071D3B',\n        textAlign: 'center',\n    },\n    error: {\n        color: '#ff6d6d',\n        fontFamily: 'casablanca-urw, sans-serif',\n        fontSize: '23px',\n        fontWeight: '300',\n        marginTop: '2px',\n    }\n}","import React from \"react\";\n\n// Importing Component\nimport SearchInput from \"../components/SearchInput\";\n\nfunction Search() {\n\n    return (\n        <main className='search--main-container'>\n            <div style={styles.search}>\n                <SearchInput />\n            </div>\n        </main>\n    );\n}\n\nexport default Search;\n\n// CSS Modules\nconst styles = {\n    body: {\n        textAlign: 'center',\n        marginTop: '0',\n    },\n    search: {\n        display: 'flex',\n        justifyItems: 'center',\n        width: '100%',\n    }\n}","import React from \"react\";\n\nfunction CardHistory(props) {\n\n    return (\n        <div className='card-history--main-container'>\n            <div src={props.imgContainer}>\n                <img src={props.img} alt={props.imgAlt} style={styles.img} />\n            </div>\n\n            <div style={styles.nameContainer}>\n                <h2 style={styles.cardName}>{props.cardName}</h2>\n            </div>\n        </div>\n    );\n}\n\nexport default CardHistory;\n\n// CSS Modules\nconst styles = {\n    imgContainer: {\n        width: '50%',\n    },\n    img: {\n        width: '100px',\n        height: '146px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    },\n    nameContainer: {\n        width: '50%',\n    },\n    cardName: {\n        marginLeft: '20px',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textAlign: 'center',\n        fontWeight: '500',\n        fontSize: '28px',\n    }\n}","import React, {useEffect, useState} from 'react';\n\n// Importing Component\nimport CardHistory from \"../components/CardHistory\";\n\nfunction SearchHistory() {\n\n    const [searchHistory, setSearchHistory] = useState(JSON.parse(localStorage.getItem('cardSearchHistory')) || []);\n\n    const [toggle, setToggle] = useState(true);\n\n    useEffect(() => {\n        if (searchHistory.length > 0) {\n            setToggle(true);\n        } else {\n            setToggle(false);\n        }\n    }, [searchHistory, toggle]);\n\n    // Looping through the items in the searchHistory and making a CardHistory component for each one.\n    let history = searchHistory.map((element, i) => {\n        return <CardHistory cardName={searchHistory[i].cardName} img={searchHistory[i].cardImg} key={i} />\n    });\n\n    return (\n        <main className='search-history--main-container'>\n            <header style={styles.headerContainer}>\n                <h2 style={styles.headerTxt}>Search History</h2>\n            </header>\n\n            {/* If we have a search history that is not empty this message will appear */}\n            {toggle &&\n            <div style={styles.p}>\n                <p>\n                    Below are the latest unique cards searched (Max 6).\n                </p>\n            </div>\n            }\n\n            {/* If we have a search history that is empty this message will appear */}\n            {!toggle &&\n            <div style={styles.p}>\n                <p>\n                    Search History is currently empty, please search for some cards!\n                </p>\n            </div>\n            }\n\n            {/* If we have a search history that is not empty this button will appear */}\n            {toggle &&\n            <div style={styles.btnContainer}>\n                <button style={styles.btn} onClick={clearHistory}>Clear Search History</button>\n            </div>\n            }\n\n            {/* If we have a search history that is empty this button will appear */}\n            {!toggle &&\n            <div style={styles.btnContainer}>\n                <button style={styles.disabledBtn} disabled>Clear Search History</button>\n            </div>\n            }\n\n            <section style={styles.contentContainer}>\n                {history}\n            </section>\n        </main>\n    );\n\n    /*\n    This function will make sure the toggle is true and if it is it will clear the local storage and\n    set the search history to a empty array.\n     */\n    function clearHistory() {\n        if (toggle === true) {\n            localStorage.clear();\n            setSearchHistory([]);\n        }\n    }\n}\n\nexport default SearchHistory;\n\n// CSS Modules\nconst styles = {\n    headerTxt: {\n        textAlign: 'center',\n        marginTop: '0',\n        fontWeight: '500',\n        fontSize: '32px',\n        color: '#071D3B',\n    },\n    p: {\n        width: '50%',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginBottom: '50px',\n        textAlign: 'center',\n        fontWeight: '300',\n        fontSize: '18px',\n        color: '#4E574F',\n    },\n    contentContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-evenly',\n    },\n    headerContainer: {\n        paddingTop: '50px',\n    },\n    btn: {\n        padding: '20px 75px',\n        backgroundColor: '#071D3B',\n        color: '#FFC300',\n        fontSize: '23px',\n        fontWeight: '500',\n        borderRadius: '4px',\n        fontFamily: 'casablanca-urw, sans-serif',\n    },\n    disabledBtn: {\n        padding: '20px 75px',\n        backgroundColor: '#3c4e64',\n        color: '#FFC300',\n        fontSize: '23px',\n        fontWeight: '500',\n        borderRadius: '4px',\n        fontFamily: 'casablanca-urw, sans-serif',\n    },\n    btnContainer: {\n        width: '75%',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginBottom: '50px',\n        textAlign: 'center',\n    }\n}","import React from \"react\";\n\n// React Router\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\n// Importing Components\nimport Home from '../pages/Home'\nimport Search from '../pages/Search'\nimport SearchHistory from \"../pages/SearchHistory\";\n\nconst Routes = () => {\n    return (\n        <Switch>\n            <Route exact path='/'>{<Redirect to=\"/Home\" />}</Route>\n            <Route exact path='/Home' component={Home} />\n            <Route exact path='/Search' component={Search} />\n            <Route exact path='/SearchHistory' component={SearchHistory} />\n        </Switch>\n    );\n}\n\nexport default Routes;","import React from 'react';\n\nfunction Footer(props) {\n    return (\n        <footer>\n            <p style={styles.footer}>{props.footer}</p>\n        </footer>\n    );\n}\n\nexport default Footer;\n\n// CSS Modules\nconst styles = {\n    footer: {\n        backgroundColor: 'black',\n        color: 'white',\n        height: '116px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        margin: '0',\n        fontWeight: '300',\n        fontSize: '23px',\n        fontFamily: 'casablanca-urw, sans-serif',\n    }\n}","import Header from './components/Header';\nimport Routes from \"./components/Routes\";\nimport Footer from \"./components/Footer\";\n\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n      <Router>\n          <Header header='Yu-Gi-Oh Card Vault' />\n          <Routes />\n          <Footer footer='©Copyright 2021. All rights reserved.' />\n      </Router>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}